
import React, { useState } from 'react';
import { useInternet } from '@/context/InternetContext';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { AlertCircle, Wifi, WifiOff, RotateCw } from 'lucide-react';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';

interface ConnectionStatusProps {
  showAlert?: boolean;
}

const ConnectionStatus: React.FC<ConnectionStatusProps> = ({ showAlert = true }) => {
  const { isOnline, checkConnection, lastChecked } = useInternet();
  const [isChecking, setIsChecking] = useState(false);

  const handleRetry = async () => {
    setIsChecking(true);
    const online = await checkConnection();
    setIsChecking(false);
    
    if (online) {
      toast.success("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", {
        description: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
        position: "bottom-center",
      });
    } else {
      toast.error("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", {
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
        position: "bottom-center",
      });
    }
  };

  if (isOnline) return null;

  if (!showAlert) return null;

  return (
    <Alert variant="destructive" className="mt-4">
      <AlertTitle className="flex items-center gap-2">
        <WifiOff className="h-4 w-4" />
        –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫—É—á–∞–µ—Ç –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É...ü•∫
      </AlertTitle>
      <AlertDescription>
        <div className="mt-2">
          –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É:
          <ul className="list-disc ml-5 mt-1 text-sm">
            <li>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</li>
            <li>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</li>
            <li>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–Ω–∏–≥</li>
            <li>–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</li>
          </ul>
        </div>
        <Button
          size="sm"
          className="mt-2 gap-1"
          onClick={handleRetry}
          disabled={isChecking}
        >
          {isChecking ? (
            <>
              <RotateCw className="h-4 w-4 animate-spin" />
              –ü—Ä–æ–≤–µ—Ä—è–µ–º...
            </>
          ) : (
            <>
              <RotateCw className="h-4 w-4" />
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            </>
          )}
        </Button>
      </AlertDescription>
    </Alert>
  );
};

export default ConnectionStatus;
