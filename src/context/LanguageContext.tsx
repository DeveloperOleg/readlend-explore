import React, { createContext, useContext, useState, useEffect } from 'react';

type Language = 'ru' | 'en';

interface LanguageContextType {
  language: Language;
  toggleLanguage: () => void;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

// Translation dictionary
const translations: Record<Language, Record<string, string>> = {
  en: {
    'greeting.morning': 'Good morning',
    'greeting.afternoon': 'Good afternoon',
    'greeting.evening': 'Good evening',
    'greeting.night': 'Good night',
    'search.placeholder': 'What are you looking for?',
    'search.notFound': 'Oops, your book has escaped from us! üò≠ The search fell into a book time hole. Maybe it\'s hiding behind the pages of other stories? Let\'s search together again! üìö‚ú®',
    'search.tryAgain': 'Try different keywords or browse our categories',
    'nav.home': 'Home',
    'nav.favorites': 'Favorites',
    'nav.saved': 'Saved',
    'sidebar.theme': 'Theme',
    'sidebar.language': 'Language',
    'sidebar.logout': 'Logout',
    'sidebar.settings': 'Settings',
    'login.username': 'Username',
    'login.password': 'Password',
    'login.submit': 'Login',
    'login.welcome': 'Welcome to ReadNest',
    'settings.title': 'App Settings',
    'settings.appearance': 'Appearance',
    'settings.darkMode': 'Dark Mode',
    'settings.open': 'Open Settings',
    'settings.version': 'App Version',
    'settings.versionNumber': '1.0.0',
    'settings.earlyVersion': 'This is an early version',
    'editor.bold': 'Bold',
    'editor.italic': 'Italic',
    'editor.underline': 'Underline',
    'editor.strikethrough': 'Strikethrough',
    'editor.color': 'Color',
    'editor.applyColor': 'Apply color',
    'editor.writeSomething': 'Write something here...',
    'editor.formatting': 'Supported formatting',
    'publish.title': 'Publish a book',
    'publish.description': 'Fill in the information about your book and edit the content before publishing.',
    'publish.bookInfo': 'Book Information',
    'publish.bookContent': 'Book Content',
    'publish.bookTitle': 'Book Title',
    'publish.titlePlaceholder': 'Enter book title',
    'publish.author': 'Author',
    'publish.authorPlaceholder': 'Enter author name',
    'publish.coverImage': 'Book Cover',
    'publish.cover': 'Cover',
    'publish.changeCover': 'Change cover',
    'publish.dropImage': 'Drop image here or click to select',
    'publish.selectImage': 'Select image',
    'publish.recommendedSize': 'Recommended size: 800√ó1200 pixels',
    'publish.content': 'Book Content',
    'publish.cancel': 'Cancel',
    'publish.publish': 'Publish'
  },
  ru: {
    'greeting.morning': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
    'greeting.afternoon': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å',
    'greeting.evening': '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
    'greeting.night': '–î–æ–±—Ä–æ–π –Ω–æ—á–∏',
    'search.placeholder': '–ß—Ç–æ –∏—â–µ–º?',
    'search.notFound': '–£–≤—ã, —Ç–≤–æ—è –∫–Ω–∏–∂–µ—á–∫–∞ —É—Å–∫–æ–ª—å–∑–Ω—É–ª–∞ –æ—Ç –Ω–∞—Å! üò≠ –ü–æ–∏—Å–∫ –ø–æ–ø–∞–ª –≤ –∫–Ω–∏–∂–Ω—É—é —è–º—É –≤—Ä–µ–º–µ–Ω–∏. –ú–æ–∂–µ—Ç, –æ–Ω–∞ –ø—Ä—è—á–µ—Ç—Å—è –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—Ä–∏–π? –î–∞–≤–∞–π –ø–æ–∏—â–µ–º –≤–º–µ—Å—Ç–µ –µ—â—ë —Ä–∞–∑! üìö‚ú®',
    'search.tryAgain': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    'nav.home': '–ì–ª–∞–≤–Ω–∞—è',
    'nav.favorites': '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
    'nav.saved': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ',
    'sidebar.theme': '–¢–µ–º–∞',
    'sidebar.language': '–Ø–∑—ã–∫',
    'sidebar.logout': '–í—ã–π—Ç–∏',
    'sidebar.settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    'login.username': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'login.password': '–ü–∞—Ä–æ–ª—å',
    'login.submit': '–í–æ–π—Ç–∏',
    'login.welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ReadNest',
    'settings.title': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    'settings.appearance': '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥',
    'settings.darkMode': '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞',
    'settings.open': '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
    'settings.version': '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    'settings.versionNumber': '1.0.0',
    'settings.earlyVersion': '–≠—Ç–æ —Ä–∞–Ω–Ω—è—è –≤–µ—Ä—Å–∏—è',
    'editor.bold': '–ñ–∏—Ä–Ω—ã–π',
    'editor.italic': '–ö—É—Ä—Å–∏–≤',
    'editor.underline': '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π',
    'editor.strikethrough': '–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π',
    'editor.color': '–¶–≤–µ—Ç',
    'editor.applyColor': '–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç',
    'editor.writeSomething': '–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–¥–µ—Å—å...',
    'editor.formatting': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    'publish.title': '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É',
    'publish.description': '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –∫–Ω–∏–≥–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.',
    'publish.bookInfo': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ',
    'publish.bookContent': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–∏–≥–∏',
    'publish.bookTitle': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏',
    'publish.titlePlaceholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏',
    'publish.author': '–ê–≤—Ç–æ—Ä',
    'publish.authorPlaceholder': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞',
    'publish.coverImage': '–û–±–ª–æ–∂–∫–∞ –∫–Ω–∏–≥–∏',
    'publish.cover': '–û–±–ª–æ–∂–∫–∞',
    'publish.changeCover': '–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É',
    'publish.dropImage': '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞',
    'publish.selectImage': '–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    'publish.recommendedSize': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 800√ó1200 –ø–∏–∫—Å–µ–ª–µ–π',
    'publish.content': '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–∏–≥–∏',
    'publish.cancel': '–û—Ç–º–µ–Ω–∞',
    'publish.publish': '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>(() => {
    // Initialize from localStorage or browser language
    const savedLang = localStorage.getItem('readnest-language') as Language | null;
    if (savedLang) return savedLang;
    
    // Default to Russian per requirements
    return 'ru';
  });

  useEffect(() => {
    // Update localStorage when language changes
    localStorage.setItem('readnest-language', language);
  }, [language]);

  const toggleLanguage = () => {
    setLanguage(prevLang => (prevLang === 'en' ? 'ru' : 'en'));
  };

  // Translation function
  const t = (key: string): string => {
    return translations[language][key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, toggleLanguage, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
