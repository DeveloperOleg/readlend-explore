
import React, { createContext, useContext, useState, useEffect } from 'react';

type Language = 'ru' | 'en';

interface LanguageContextType {
  language: Language;
  toggleLanguage: () => void;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

// Translation dictionary
const translations: Record<Language, Record<string, string>> = {
  en: {
    'greeting.morning': 'Good morning',
    'greeting.afternoon': 'Good afternoon',
    'greeting.evening': 'Good evening',
    'greeting.night': 'Good night',
    'search.placeholder': 'What are you looking for?',
    'search.notFound': 'Oops, your book has escaped from us! üò≠ The search fell into a book time hole. Maybe it\'s hiding behind the pages of other stories? Let\'s search together again! üìö‚ú®',
    'nav.home': 'Home',
    'nav.favorites': 'Favorites',
    'nav.saved': 'Saved',
    'sidebar.theme': 'Theme',
    'sidebar.language': 'Language',
    'sidebar.logout': 'Logout',
    'login.username': 'Username',
    'login.password': 'Password',
    'login.submit': 'Login',
    'login.welcome': 'Welcome to ReadNest',
  },
  ru: {
    'greeting.morning': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
    'greeting.afternoon': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å',
    'greeting.evening': '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
    'greeting.night': '–î–æ–±—Ä–æ–π –Ω–æ—á–∏',
    'search.placeholder': '–ß—Ç–æ –∏—â–µ–º?',
    'search.notFound': '–£–≤—ã, —Ç–≤–æ—è –∫–Ω–∏–∂–µ—á–∫–∞ —É—Å–∫–æ–ª—å–∑–Ω—É–ª–∞ –æ—Ç –Ω–∞—Å! üò≠ –ü–æ–∏—Å–∫ –ø–æ–ø–∞–ª –≤ –∫–Ω–∏–∂–Ω—É—é —è–º—É –≤—Ä–µ–º–µ–Ω–∏. –ú–æ–∂–µ—Ç, –æ–Ω–∞ –ø—Ä—è—á–µ—Ç—Å—è –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—Ä–∏–π? –î–∞–≤–∞–π –ø–æ–∏—â–µ–º –≤–º–µ—Å—Ç–µ –µ—â—ë —Ä–∞–∑! üìö‚ú®',
    'nav.home': '–ì–ª–∞–≤–Ω–∞—è',
    'nav.favorites': '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
    'nav.saved': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ',
    'sidebar.theme': '–¢–µ–º–∞',
    'sidebar.language': '–Ø–∑—ã–∫',
    'sidebar.logout': '–í—ã–π—Ç–∏',
    'login.username': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'login.password': '–ü–∞—Ä–æ–ª—å',
    'login.submit': '–í–æ–π—Ç–∏',
    'login.welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ReadNest',
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>(() => {
    // Initialize from localStorage or browser language
    const savedLang = localStorage.getItem('readnest-language') as Language | null;
    if (savedLang) return savedLang;
    
    // Default to Russian per requirements
    return 'ru';
  });

  useEffect(() => {
    // Update localStorage when language changes
    localStorage.setItem('readnest-language', language);
  }, [language]);

  const toggleLanguage = () => {
    setLanguage(prevLang => (prevLang === 'en' ? 'ru' : 'en'));
  };

  // Translation function
  const t = (key: string): string => {
    return translations[language][key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, toggleLanguage, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
